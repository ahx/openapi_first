openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://petstore.swagger.io/api
paths:
  /pets:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: create_pet
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPet"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/NewPet"
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /json_api:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: create_pet_json_api
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: "#/components/schemas/NewPet"
      responses:
        "200":
          description: ok
  /custom-json-type:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: create_pet_custom-json-type
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/prs.custom-json-type+json:
            schema:
              $ref: "#/components/schemas/NewPet"
      responses:
        "200":
          description: ok
  /pets/{id}:
    parameters:
      - name: id
        in: path
        description: ID of pet to fetch
        required: true
        schema:
          type: integer
          format: int64
    patch:
      description: Updates a pet
      operationId: update_pet
      requestBody:
        description: Changes
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewPet"
      responses:
        "200":
          description: pet response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /with-default-body-value:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - has_default
              properties:
                has_default:
                  type: boolean
                  default: true
  /without-request-body:
    post:
      responses:
        200:
          description: Ok
  /multipart-with-file:
    post:
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                petId:
                  type: string
                  pattern: "[0-9]+"
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: ok
  /nested-multipart-with-file:
    post:
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    avatar:
                      type: string
                      format: binary
      responses:
        "200":
          description: ok
  /users-with-avatars:
    post:
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      avatar:
                        type: string
                        format: binary
      responses:
        "200":
          description: ok
  /with-form-urlencoded:
    post:
      requestBody:
        description: Pet to add to the store
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/NewPet"
      responses:
        "200":
          description: ok
components:
  schemas:
    Pet:
      allOf:
        - $ref: "#/components/schemas/NewPet"
        - required:
            - id
          properties:
            id:
              type: integer
              format: int64

    NewPet:
      required:
        - type
        - attributes
      properties:
        type:
          type: string
          enum:
            - pet
            - plant
        attributes:
          additionalProperties: false
          type: object
          required: [name]
          properties:
            name:
              type: string

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
